from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from models.order import Order
from services.order_service import OrderService
from keyboards.order_kb import (
    get_order_type_kb,
    get_order_confirmation_kb,
    get_back_kb,
    get_order_actions_kb
)
from config.constants import OrderStatus
from config.settings import MAX_ORDERS_PER_USER

router = Router()

class OrderStates(StatesGroup):
    SELECTING_ORDER_TYPE = State()
    ENTERING_SUBJECT = State()
    ENTERING_DESCRIPTION = State()
    ENTERING_DEADLINE = State()
    ENTERING_BUDGET = State()
    UPLOADING_FILE = State()
    CONFIRMING_ORDER = State()

@router.callback_query(F.data == "create_order")
async def create_order(
    callback: CallbackQuery, 
    state: FSMContext,
    order_service: OrderService,
    db: Database
):
    await callback.answer()
    user = callback.from_user
    
    active_orders = db.get_user_orders(user.id, OrderStatus.ACTIVE.value)
    if len(active_orders) >= MAX_ORDERS_PER_USER:
        from keyboards.common import get_main_menu_kb
        await callback.message.edit_text(
            f"‚ö†Ô∏è –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ ({MAX_ORDERS_PER_USER})\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—ã—Å–∏—Ç—å –±—é–¥–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–ª–∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
            reply_markup=get_main_menu_kb()
        )
        return
    
    await state.set_state(OrderStates.SELECTING_ORDER_TYPE)
    await callback.message.edit_text(
        "üìå *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:*",
        reply_markup=get_order_type_kb(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("type_"), OrderStates.SELECTING_ORDER_TYPE)
async def set_order_type(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    order_type = callback.data.split("_")[1]
    await state.update_data(order_type=order_type)
    await state.set_state(OrderStates.ENTERING_SUBJECT)
    await callback.message.edit_text(
        "üìö *–®–∞–≥ 1 –∏–∑ 5: –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç/–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É*\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n_–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞_\n_–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π_\n_–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python_",
        reply_markup=get_back_kb("back_to_types"),
        parse_mode="Markdown"
    )

@router.message(OrderStates.ENTERING_SUBJECT)
async def enter_subject(message: Message, state: FSMContext):
    subject = message.text
    await state.update_data(subject=subject)
    await state.set_state(OrderStates.ENTERING_DESCRIPTION)
    
    from aiogram.utils.keyboard import ReplyKeyboardBuilder
    builder = ReplyKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    
    await message.answer(
        "üìù *–®–∞–≥ 2 –∏–∑ 5: –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ*\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n_–†–µ—à–∏—Ç—å 5 –∑–∞–¥–∞—á –ø–æ —Ç–µ–æ—Ä–∏–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –∏–∑ —É—á–µ–±–Ω–∏–∫–∞ –ü–µ—Ç—Ä–æ–≤–∞_\n"
        "_–ù–∞–ø–∏—Å–∞—Ç—å –∫—É—Ä—Å–æ–≤—É—é –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ, 25-30 —Å—Ç—Ä–∞–Ω–∏—Ü_",
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True),
        parse_mode="Markdown"
    )

@router.message(OrderStates.ENTERING_DESCRIPTION)
async def enter_description(message: Message, state: FSMContext):
    description = message.text
    await state.update_data(description=description)
    await state.set_state(OrderStates.ENTERING_DEADLINE)
    
    from aiogram.utils.keyboard import ReplyKeyboardBuilder
    builder = ReplyKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    
    await message.answer(
        "‚è∞ *–®–∞–≥ 3 –∏–∑ 5: –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è*\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n_–¥–æ 20 –º–∞—è_\n_–≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π_\n_—Å—Ä–æ—á–Ω–æ, —Å–µ–≥–æ–¥–Ω—è –¥–æ 18:00_",
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True),
        parse_mode="Markdown"
    )

@router.message(OrderStates.ENTERING_DEADLINE)
async def enter_deadline(message: Message, state: FSMContext):
    deadline = message.text
    await state.update_data(deadline=deadline)
    await state.set_state(OrderStates.ENTERING_BUDGET)
    
    from aiogram.utils.keyboard import ReplyKeyboardBuilder
    builder = ReplyKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    
    await message.answer(
        "üí∞ *–®–∞–≥ 4 –∏–∑ 5: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç*\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n_1500 —Ä—É–±_\n_2000 —Ä—É–±–ª–µ–π_\n_3000‚ÇΩ_",
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True),
        parse_mode="Markdown"
    )

@router.message(OrderStates.ENTERING_BUDGET)
async def enter_budget(message: Message, state: FSMContext):
    try:
        budget = int(''.join(filter(str.isdigit, message.text)))
        if budget <= 0:
            raise ValueError
    except (ValueError, TypeError):
        from aiogram.utils.keyboard import ReplyKeyboardBuilder
        builder = ReplyKeyboardBuilder()
        builder.button(text="üîô –ù–∞–∑–∞–¥")
        
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–æ–ª—å—à–µ 0)",
            reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
        )
        return
    
    await state.update_data(budget=budget)
    await state.set_state(OrderStates.UPLOADING_FILE)
    
    from aiogram.utils.keyboard import ReplyKeyboardBuilder
    builder = ReplyKeyboardBuilder()
    builder.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    
    await message.answer(
        "üìé *–®–∞–≥ 5 –∏–∑ 5: –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)*\n\n"
        "–§–æ—Ä–º–∞—Ç—ã: PDF, DOCX, TXT\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5 –ú–ë\n\n"
        "–ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True),
        parse_mode="Markdown"
    )

@router.message(OrderStates.UPLOADING_FILE, F.document)
async def handle_file_upload(message: Message, state: FSMContext, bot: Bot):
    from config.settings import UPLOAD_FOLDER, MAX_FILE_SIZE_MB, FILE_TYPES
    from pathlib import Path
    import uuid
    
    file = await bot.get_file(message.document.file_id)
    file_ext = Path(message.document.file_name).suffix.lower()
    
    if file_ext not in FILE_TYPES:
        from aiogram.utils.keyboard import ReplyKeyboardBuilder
        builder = ReplyKeyboardBuilder()
        builder.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
        builder.button(text="üîô –ù–∞–∑–∞–¥")
        
        await message.answer(
            f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(FILE_TYPES)}",
            reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
        )
        return
    
    if message.document.file_size > MAX_FILE_SIZE_MB * 1024 * 1024:
        from aiogram.utils.keyboard import ReplyKeyboardBuilder
        builder = ReplyKeyboardBuilder()
        builder.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
        builder.button(text="üîô –ù–∞–∑–∞–¥")
        
        await message.answer(
            f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE_MB} –ú–ë",
            reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
        )
        return
    
    file_name = f"{uuid.uuid4()}{file_ext}"
    file_path = UPLOAD_FOLDER / file_name
    await bot.download_file(file.file_path, destination=file_path)
    
    await state.update_data(file_path=str(file_path))
    await confirm_order(message, state)

@router.message(OrderStates.UPLOADING_FILE, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_file_upload(message: Message, state: FSMContext):
    await confirm_order(message, state)

async def confirm_order(message: Message, state: FSMContext):
    data = await state.get_data()
    order_type = data['order_type']
    
    from config.constants import ORDER_TYPES
    emoji, type_display = ORDER_TYPES.get(order_type, ("‚úèÔ∏è", "–î–†–£–ì–û–ï –ó–ê–î–ê–ù–ò–ï"))
    
    confirm_text = (
        f"üîπ *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞*\n\n"
        f"{emoji} *–¢–∏–ø —Ä–∞–±–æ—Ç—ã:* {type_display}\n"
        f"üìö *–ü—Ä–µ–¥–º–µ—Ç:* {data['subject']}\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{data['description']}\n"
        f"‚è∞ *–°—Ä–æ–∫:* {data['deadline']}\n"
        f"üí∞ *–ë—é–¥–∂–µ—Ç:* {data['budget']} —Ä—É–±\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    
    await state.set_state(OrderStates.CONFIRMING_ORDER)
    await message.answer(
        confirm_text,
        reply_markup=get_order_confirmation_kb(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "final_confirm", OrderStates.CONFIRMING_ORDER)
async def final_confirm_order(callback: CallbackQuery, state: FSMContext, order_service: OrderService):
    await callback.answer()
    data = await state.get_data()
    user = callback.from_user
    
    order_data = {
        'type': data['order_type'],
        'subject': data['subject'],
        'description': data['description'],
        'deadline': data['deadline'],
        'budget': data['budget'],
        'file_path': data.get('file_path'),
        'client_id': user.id
    }
    
    order = await order_service.create_order(order_data, user.id)
    if not order:
        from keyboards.common import get_main_menu_kb
        await callback.message.edit_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_kb()
        )
        return
    
    from keyboards.order_kb import get_order_created_kb
    emoji, type_display = ORDER_TYPES.get(order.type, ("‚úèÔ∏è", "–î–†–£–ì–û–ï –ó–ê–î–ê–ù–ò–ï"))
    
    await callback.message.edit_text(
        f"‚úÖ *–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n\n"
        f"{emoji} *–¢–∏–ø:* {type_display}\n"
        f"üìö *–ü—Ä–µ–¥–º–µ—Ç:* {order.subject}\n"
        f"üí∞ *–ë—é–¥–∂–µ—Ç:* {order.budget} —Ä—É–±\n"
        f"‚è∞ *–°—Ä–æ–∫:* {order.deadline}\n\n"
        f"üÜî *ID:* `{order.order_id}`\n\n"
        "üìå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —É–∂–µ –≤–∏–¥—è—Ç –≤–∞—à –∑–∞–∫–∞–∑. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!",
        reply_markup=get_order_created_kb(order.order_id),
        parse_mode="Markdown"
    )
    await state.clear()

@router.callback_query(F.data.startswith("accept_"))
async def accept_order(callback: CallbackQuery, order_service: OrderService):
    await callback.answer()
    order_id = callback.data.split("_")[1]
    executor_id = callback.from_user.id
    
    success = await order_service.accept_order(order_id, executor_id)
    if not success:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", show_alert=True)
        return
    
    await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑!", show_alert=True)

@router.callback_query(F.data.startswith("complete_"))
async def complete_order(callback: CallbackQuery, order_service: OrderService):
    await callback.answer()
    order_id = callback.data.split("_")[1]
    
    success = await order_service.complete_order(order_id)
    if not success:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", show_alert=True)
        return
    
    await callback.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!", show_alert=True)

@router.callback_query(F.data.startswith("cancel_"))
async def cancel_order(callback: CallbackQuery, order_service: OrderService):
    await callback.answer()
    order_id = callback.data.split("_")[1]
    canceled_by = callback.from_user.id
    
    success = await order_service.cancel_order(order_id, canceled_by)
    if not success:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", show_alert=True)
        return
    
    await callback.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω!", show_alert=True)

@router.callback_query(F.data.startswith("back_to_"))
async def back_to_previous(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    back_to = callback.data.split("_")[-1]
    
    if back_to == "types":
        await state.set_state(OrderStates.SELECTING_ORDER_TYPE)
        await callback.message.edit_text(
            "üìå *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:*",
            reply_markup=get_order_type_kb(),
            parse_mode="Markdown"
        )
    elif back_to == "subject":
        await state.set_state(OrderStates.ENTERING_SUBJECT)
        await callback.message.edit_text(
            "üìö *–®–∞–≥ 1 –∏–∑ 5: –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç/–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É*\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n_–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞_\n_–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π_\n_–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python_",
            reply_markup=get_back_kb("back_to_types"),
            parse_mode="Markdown"
        )
    elif back_to == "description":
        await state.set_state(OrderStates.ENTERING_DESCRIPTION)
        await callback.message.edit_text(
            "üìù *–®–∞–≥ 2 –∏–∑ 5: –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ*\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n_–†–µ—à–∏—Ç—å 5 –∑–∞–¥–∞—á –ø–æ —Ç–µ–æ—Ä–∏–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –∏–∑ —É—á–µ–±–Ω–∏–∫–∞ –ü–µ—Ç—Ä–æ–≤–∞_\n"
            "_–ù–∞–ø–∏—Å–∞—Ç—å –∫—É—Ä—Å–æ–≤—É—é –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ, 25-30 —Å—Ç—Ä–∞–Ω–∏—Ü_",
            reply_markup=get_back_kb("back_to_subject"),
            parse_mode="Markdown"
        )
    elif back_to == "deadline":
        await state.set_state(OrderStates.ENTERING_DEADLINE)
        await callback.message.edit_text(
            "‚è∞ *–®–∞–≥ 3 –∏–∑ 5: –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è*\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n_–¥–æ 20 –º–∞—è_\n_–≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π_\n_—Å—Ä–æ—á–Ω–æ, —Å–µ–≥–æ–¥–Ω—è –¥–æ 18:00_",
            reply_markup=get_back_kb("back_to_description"),
            parse_mode="Markdown"
        )
    elif back_to == "budget":
        await state.set_state(OrderStates.ENTERING_BUDGET)
        await callback.message.edit_text(
            "üí∞ *–®–∞–≥ 4 –∏–∑ 5: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç*\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n_1500 —Ä—É–±_\n_2000 —Ä—É–±–ª–µ–π_\n_3000‚ÇΩ_",
            reply_markup=get_back_kb("back_to_deadline"),
            parse_mode="Markdown"
        )