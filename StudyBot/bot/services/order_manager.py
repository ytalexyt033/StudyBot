import datetime
import logging
from typing import Dict, Any
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from models.enums import OrderStatus, DisputeStatus, UserRole, order_types
from config import ADMIN_CHAT_ID, MAX_ORDERS_PER_USER

logger = logging.getLogger(__name__)

class OrderManager:
    def __init__(self, application, db):
        self.application = application
        self.db = db

    async def add_order(self, order_data: Dict[str, Any]) -> str:
        user_orders = self.db.get_user_orders(order_data['client_id'], OrderStatus.ACTIVE.value)
        if len(user_orders) >= MAX_ORDERS_PER_USER:
            raise ValueError(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ ({MAX_ORDERS_PER_USER})")

        order_id = self.db.add_order(order_data)
        await self._notify_admins_about_new_order(order_id)
        return order_id

    async def _update_order_message(self, order_id: str):
        order = self.db.get_order(order_id)
        if not order:
            return

        emoji, type_display = order_types.get(order['type'], ("‚úèÔ∏è", "–î–†–£–ì–û–ï –ó–ê–î–ê–ù–ò–ï"))

        status_text = {
            OrderStatus.ACTIVE.value: "üéØ –ê–ö–¢–ò–í–ù–´–ô –ó–ê–ö–ê–ó",
            OrderStatus.TAKEN.value: "‚úÖ –ü–†–ò–ù–Ø–¢ –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ï–ú",
            OrderStatus.IN_PROGRESS.value: "üîÑ –í –†–ê–ë–û–¢–ï",
            OrderStatus.UNDER_REVIEW.value: "üîç –ù–ê –ü–†–û–í–ï–†–ö–ï",
            OrderStatus.COMPLETED.value: "üèÅ –ó–ê–í–ï–†–®–ï–ù",
            OrderStatus.CANCELED.value: "‚ùå –û–¢–ú–ï–ù–ï–ù",
            OrderStatus.DISPUTE.value: "‚öñÔ∏è –°–ü–û–†"
        }.get(order['status'], "üéØ –ê–ö–¢–ò–í–ù–´–ô –ó–ê–ö–ê–ó")
        
        client = self.db.get_user(order['client_id'])
        executor_info = ""
        
        if order['executor_id']:
            executor = self.db.get_user(order['executor_id'])
            executor_info = f"\nüë®‚Äçüíª *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* @{executor['username']}" if executor else ""
        
        text = (
            f"{status_text}\n\n"
            f"{emoji} *–¢–∏–ø:* {type_display}\n"
            f"üìö *–ü—Ä–µ–¥–º–µ—Ç:* {order.get('subject', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{order.get('description', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚è∞ *–°—Ä–æ–∫:* {order.get('deadline', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üí∞ *–ë—é–¥–∂–µ—Ç:* {order.get('budget', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} —Ä—É–±"
            f"{executor_info}\n\n"
            f"üë§ *–ö–ª–∏–µ–Ω—Ç:* @{client['username']}\n"
            f"üÜî *ID:* `{order_id}`"
        )
        
        reply_markup = None
        if order['status'] == OrderStatus.ACTIVE.value:
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"accept_{order_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{order_id}")]
            ])
        elif order['status'] == OrderStatus.DISPUTE.value:
            dispute = self.db.get_order_dispute(order_id)
            if dispute:
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚öñÔ∏è –ü—Ä–∏–Ω—è—Ç—å —Å–ø–æ—Ä", callback_data=f"take_dispute_{dispute['dispute_id']}")]
                ])
        
        try:
            if order.get('message_id'):
                await self.application.bot.edit_message_text(
                    chat_id=ADMIN_CHAT_ID,
                    message_id=order['message_id'],
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
            else:
                sent_message = await self.application.bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
                self.db.update_order(order_id, {"message_id": sent_message.message_id})
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _notify_admins_about_new_order(self, order_id: str):
        order = self.db.get_order(order_id)
        if not order:
            return
        
        emoji, type_display = order_types.get(order['type'], ("‚úèÔ∏è", "–î–†–£–ì–û–ï –ó–ê–î–ê–ù–ò–ï"))
        client = self.db.get_user(order['client_id'])
        
        text = (
            f"üîî *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
            f"{emoji} *–¢–∏–ø:* {type_display}\n"
            f"üìö *–ü—Ä–µ–¥–º–µ—Ç:* {order.get('subject', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üí∞ *–ë—é–¥–∂–µ—Ç:* {order.get('budget', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} —Ä—É–±\n\n"
            f"üë§ *–ö–ª–∏–µ–Ω—Ç:* @{client['username']}\n"
            f"üÜî *ID:* `{order_id}`"
        )
        
        try:
            sent_message = await self.application.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"accept_{order_id}")]
                ]),
                parse_mode="Markdown"
            )
            
            self.db.update_order(order_id, {"message_id": sent_message.message_id})
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç Study-Offers: {e}")
    
    async def accept_order(self, order_id: str, executor_id: int) -> bool:
        order = self.db.get_order(order_id)
        if not order or order['status'] != OrderStatus.ACTIVE.value:
            return False
        
        self.db.update_order(order_id, {
            "status": OrderStatus.TAKEN.value,
            "executor_id": executor_id
        })
        
        executor = self.db.get_user(executor_id)
        client = self.db.get_user(order['client_id'])
        
        if client:
            try:
                await self.application.bot.send_message(
                    chat_id=client['user_id'],
                    text=(
                        f"üéâ –í–∞—à –∑–∞–∫–∞–∑ *{order_id}* –ø—Ä–∏–Ω—è—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º!\n\n"
                        f"üë®‚Äçüíª *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* @{executor['username']}\n"
                        f"üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
                    ),
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {e}")
        
        await self._update_order_message(order_id)
        return True
    
    async def cancel_order(self, order_id: str, canceled_by: int) -> bool:
        order = self.db.get_order(order_id)
        if not order:
            return False
        
        self.db.update_order(order_id, {
            "status": OrderStatus.CANCELED.value
        })
        
        client = self.db.get_user(order['client_id'])
        executor = self.db.get_user(order['executor_id']) if order['executor_id'] else None
        canceled_by_user = self.db.get_user(canceled_by)
        
        notification_text = (
            f"‚ö†Ô∏è –ó–∞–∫–∞–∑ *{order_id}* –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{canceled_by_user['username']}\n\n"
            f"üìö *–ü—Ä–µ–¥–º–µ—Ç:* {order.get('subject', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üí∞ *–ë—é–¥–∂–µ—Ç:* {order.get('budget', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} —Ä—É–±"
        )
        
        if canceled_by != client['user_id'] and client:
            try:
                await self.application.bot.send_message(
                    chat_id=client['user_id'],
                    text=notification_text,
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {e}")
        
        if executor and canceled_by != executor['user_id']:
            try:
                await self.application.bot.send_message(
                    chat_id=executor['user_id'],
                    text=notification_text,
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {e}")
        
        await self._update_order_message(order_id)
        return True
    
    async def complete_order(self, order_id: str) -> bool:
        order = self.db.get_order(order_id)
        if not order or order['status'] not in [OrderStatus.TAKEN.value, OrderStatus.IN_PROGRESS.value, OrderStatus.UNDER_REVIEW.value]:
            return False
        
        self.db.update_order(order_id, {
            "status": OrderStatus.COMPLETED.value,
            "completed_at": datetime.datetime.now().isoformat()
        })
        
        client = self.db.get_user(order['client_id'])
        executor = self.db.get_user(order['executor_id']) if order['executor_id'] else None
        
        notification_text = (
            f"üèÅ –ó–∞–∫–∞–∑ *{order_id}* –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            f"üìö *–ü—Ä–µ–¥–º–µ—Ç:* {order.get('subject', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üí∞ *–ë—é–¥–∂–µ—Ç:* {order.get('budget', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} —Ä—É–±\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."
        )
        
        if client:
            try:
                await self.application.bot.send_message(
                    chat_id=client['user_id'],
                    text=notification_text,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f"rate_{order_id}")]
                    ]),
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {e}")
        
        if executor:
            try:
                await self.application.bot.send_message(
                    chat_id=executor['user_id'],
                    text=notification_text,
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {e}")
        
        await self._update_order_message(order_id)
        return True
    
    async def open_dispute(self, order_id: str, opened_by: int, reason: str) -> bool:
        order = self.db.get_order(order_id)
        if not order or order['status'] == OrderStatus.CANCELED.value or order['status'] == OrderStatus.COMPLETED.value:
            return False
        
        dispute_id = self.db.add_dispute(order_id, opened_by, reason)
        
        client = self.db.get_user(order['client_id'])
        executor = self.db.get_user(order['executor_id']) if order['executor_id'] else None
        opened_by_user = self.db.get_user(opened_by)
        
        notification_text = (
            f"‚öñÔ∏è –ü–æ –∑–∞–∫–∞–∑—É *{order_id}* –æ—Ç–∫—Ä—ã—Ç —Å–ø–æ—Ä!\n\n"
            f"üë§ *–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:* @{opened_by_user['username']}\n"
            f"üìù *–ü—Ä–∏—á–∏–Ω–∞:* {reason}\n\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏."
        )
        
        if opened_by != client['user_id'] and client:
            try:
                await self.application.bot.send_message(
                    chat_id=client['user_id'],
                    text=notification_text,
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {e}")
        
        if executor and opened_by != executor['user_id']:
            try:
                await self.application.bot.send_message(
                    chat_id=executor['user_id'],
                    text=notification_text,
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {e}")
        
        cursor = self.db.conn.cursor()
        cursor.execute("SELECT user_id FROM users WHERE role = ?", (UserRole.ADMIN.value,))
        admins = cursor.fetchall()
        
        for admin in admins:
            try:
                await self.application.bot.send_message(
                    chat_id=admin[0],
                    text=(
                        f"‚öñÔ∏è *–ù–æ–≤—ã–π —Å–ø–æ—Ä!*\n\n"
                        f"üÜî *ID —Å–ø–æ—Ä–∞:* `{dispute_id}`\n"
                        f"üÜî *ID –∑–∞–∫–∞–∑–∞:* `{order_id}`\n"
                        f"üë§ *–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:* @{opened_by_user['username']}\n"
                        f"üìù *–ü—Ä–∏—á–∏–Ω–∞:* {reason}\n\n"
                        f"–î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Å–ø–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
                    ),
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚öñÔ∏è –ü—Ä–∏–Ω—è—Ç—å —Å–ø–æ—Ä", callback_data=f"take_dispute_{dispute_id}")]
                    ]),
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin[0]}: {e}")
        
        await self._update_order_message(order_id)
        return True
    
    async def resolve_dispute(self, dispute_id: str, admin_id: int, resolution: str, accept: bool) -> bool:
        dispute = self.db.get_dispute(dispute_id)
        if not dispute or dispute['status'] != DisputeStatus.OPENED.value:
            return False
        
        order = self.db.get_order(dispute['order_id'])
        if not order:
            return False
        
        new_status = DisputeStatus.RESOLVED.value if accept else DisputeStatus.REJECTED.value
        self.db.update_dispute(dispute_id, {
            "status": new_status,
            "admin_id": admin_id,
            "resolution": resolution,
            "resolved_at": datetime.datetime.now().isoformat()
        })
        
        if accept:
            self.db.update_order(order['order_id'], {"status": OrderStatus.CANCELED.value})
        else:
            self.db.update_order(order['order_id'], {"status": OrderStatus.IN_PROGRESS.value})
        
        client = self.db.get_user(order['client_id'])
        executor = self.db.get_user(order['executor_id']) if order['executor_id'] else None
        admin = self.db.get_user(admin_id)
        
        resolution_text = (
            f"‚öñÔ∏è *–°–ø–æ—Ä –ø–æ –∑–∞–∫–∞–∑—É {order['order_id']} —Ä–∞–∑—Ä–µ—à–µ–Ω!*\n\n"
            f"üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* @{admin['username']}\n"
            f"üìù *–†–µ—à–µ–Ω–∏–µ:* {resolution}\n"
            f"üîπ *–†–µ–∑—É–ª—å—Ç–∞—Ç:* {'–ü—Ä–∏–Ω—è—Ç–æ' if accept else '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'}\n\n"
        )
        
        if accept:
            resolution_text += "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω, —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∑–∞–∫–∞–∑—á–∏–∫—É."
        else:
            resolution_text += "–ó–∞–∫–∞–∑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ —Ä–∞–±–æ—Ç—É."
        
        if client:
            try:
                await self.application.bot.send_message(
                    chat_id=client['user_id'],
                    text=resolution_text,
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {e}")
        
        if executor:
            try:
                await self.application.bot.send_message(
                    chat_id=executor['user_id'],
                    text=resolution_text,
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {e}")
        
        await self._update_order_message(order['order_id'])
        return True